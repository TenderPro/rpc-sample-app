// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: main.proto

package pb

import (
	context "context"
	fmt "fmt"
	ticker "github.com/TenderPro/rpckit/app/ticker"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/nats-rpc/nrpc"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type PingRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" log_field:"ping_value"`
	SleepTimeMs          int32    `protobuf:"varint,2,opt,name=sleep_time_ms,json=sleepTimeMs,proto3" json:"sleep_time_ms,omitempty"`
	ErrorCodeReturned    uint32   `protobuf:"varint,3,opt,name=error_code_returned,json=errorCodeReturned,proto3" json:"error_code_returned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()      { *m = PingRequest{} }
func (*PingRequest) ProtoMessage() {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{1}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingRequest) GetSleepTimeMs() int32 {
	if m != nil {
		return m.SleepTimeMs
	}
	return 0
}

func (m *PingRequest) GetErrorCodeReturned() uint32 {
	if m != nil {
		return m.ErrorCodeReturned
	}
	return 0
}

type PingResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Counter              int32    `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{2}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingResponse) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*PingRequest)(nil), "pb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "pb.PingResponse")
}

func init() { proto.RegisterFile("main.proto", fileDescriptor_7ed94b0a22d11796) }

var fileDescriptor_7ed94b0a22d11796 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x6a, 0x1b, 0x49,
	0x14, 0x75, 0x49, 0x96, 0x1f, 0xe5, 0x31, 0xb6, 0xcb, 0x2f, 0x8d, 0xf0, 0xc8, 0x8d, 0x66, 0x23,
	0x3c, 0x56, 0x97, 0xfc, 0x60, 0x16, 0x1e, 0x18, 0xc6, 0xf2, 0x3c, 0x16, 0xf3, 0xc0, 0xb4, 0xcd,
	0x90, 0xac, 0x44, 0xab, 0x75, 0xdd, 0x2a, 0xd4, 0x5d, 0x55, 0xa9, 0x2a, 0x49, 0x71, 0x8c, 0x21,
	0xe4, 0x0b, 0x42, 0xb2, 0x08, 0x04, 0xb2, 0xcc, 0x0f, 0x64, 0x9f, 0x7d, 0x96, 0x81, 0x6c, 0xb2,
	0xca, 0x43, 0xe4, 0x0b, 0xf2, 0x05, 0xa1, 0x4b, 0x2d, 0x5b, 0xb1, 0x43, 0xc8, 0xa6, 0xbb, 0x6e,
	0x9d, 0x7b, 0xce, 0xb9, 0xb7, 0xea, 0x16, 0xc6, 0xb1, 0xcf, 0xb8, 0x2b, 0x95, 0x30, 0x82, 0x64,
	0x64, 0xa3, 0x50, 0x09, 0x99, 0x69, 0x75, 0x1a, 0x6e, 0x20, 0x62, 0x1a, 0x8a, 0x50, 0x50, 0x0b,
	0x35, 0x3a, 0x27, 0x36, 0xb2, 0x81, 0x5d, 0x0d, 0x28, 0x85, 0xb5, 0x50, 0x88, 0x30, 0x02, 0xea,
	0x4b, 0x46, 0x7d, 0xce, 0x85, 0xf1, 0x0d, 0x13, 0x5c, 0xa7, 0xe8, 0xcf, 0x23, 0x62, 0x71, 0x8f,
	0x99, 0xb6, 0xe8, 0xd1, 0x50, 0x54, 0x2c, 0x58, 0xe9, 0xfa, 0x11, 0x6b, 0xfa, 0x46, 0x28, 0x4d,
	0x2f, 0x96, 0x29, 0xef, 0xc7, 0x11, 0x1e, 0xf7, 0x8d, 0xae, 0x28, 0x19, 0x50, 0x3e, 0xfc, 0xa4,
	0x49, 0x3b, 0x23, 0x49, 0xc7, 0xc0, 0x9b, 0xa0, 0x0e, 0x95, 0xa0, 0x4a, 0x06, 0x6d, 0x66, 0xa8,
	0x2f, 0x25, 0x35, 0x2c, 0x68, 0x83, 0x4a, 0x7f, 0x29, 0x69, 0xd3, 0xfe, 0x82, 0x4a, 0x08, 0xbc,
	0xa2, 0x7b, 0x7e, 0x18, 0x82, 0xa2, 0x42, 0xda, 0x9a, 0xaf, 0xd7, 0x5f, 0x9a, 0xc4, 0xb9, 0x3f,
	0x62, 0x69, 0x4e, 0x4b, 0x4f, 0x10, 0x9e, 0x39, 0x64, 0x3c, 0xf4, 0xe0, 0x56, 0x07, 0xb4, 0x21,
	0x55, 0x9c, 0xeb, 0xfa, 0x51, 0x07, 0xf2, 0xc8, 0x41, 0xe5, 0xe9, 0x5a, 0xe1, 0xe3, 0x9b, 0xf5,
	0x95, 0x48, 0x84, 0xf5, 0x13, 0x06, 0x51, 0x73, 0xaf, 0x24, 0x19, 0x0f, 0xeb, 0x36, 0xa1, 0xe4,
	0x0d, 0x12, 0xc9, 0x26, 0x9e, 0xd5, 0x11, 0x80, 0xac, 0x1b, 0x16, 0x43, 0x3d, 0xd6, 0xf9, 0x8c,
	0x83, 0xca, 0xb9, 0xda, 0x54, 0xff, 0xed, 0xfa, 0xf8, 0xfc, 0x58, 0x1e, 0x7b, 0x33, 0x16, 0x3e,
	0x66, 0x31, 0xfc, 0xab, 0x89, 0x8b, 0x17, 0x41, 0x29, 0xa1, 0xea, 0x81, 0x68, 0x42, 0x5d, 0x81,
	0xe9, 0x28, 0x0e, 0xcd, 0x7c, 0xd6, 0x41, 0xe5, 0x59, 0x6f, 0xc1, 0x42, 0x07, 0xa2, 0x09, 0x5e,
	0x0a, 0x94, 0x7e, 0xc5, 0xdf, 0x0d, 0xca, 0xd3, 0x52, 0x70, 0x0d, 0x64, 0x09, 0xe7, 0xfe, 0xbf,
	0xac, 0xcf, 0x1b, 0x04, 0x24, 0x8f, 0x27, 0x03, 0xd1, 0xe1, 0x06, 0xd4, 0xc0, 0xdd, 0x1b, 0x86,
	0xdb, 0x8f, 0xb2, 0x83, 0xfe, 0x8e, 0x40, 0x75, 0x59, 0x00, 0xa4, 0x86, 0xc7, 0x93, 0x90, 0xcc,
	0xb9, 0xb2, 0xe1, 0x8e, 0x34, 0x5e, 0x98, 0xbf, 0xdc, 0x18, 0x58, 0x95, 0x56, 0xef, 0xbd, 0xfa,
	0xf0, 0x30, 0xb3, 0x40, 0xe6, 0x68, 0x77, 0x8b, 0x6a, 0x3f, 0x96, 0x11, 0xd0, 0xa4, 0x7f, 0xf2,
	0x17, 0x9e, 0x4e, 0x12, 0xed, 0x01, 0x92, 0xe9, 0x84, 0x67, 0x97, 0x5f, 0x90, 0xf8, 0xc1, 0x4a,
	0xac, 0x92, 0xe5, 0x2b, 0x12, 0x14, 0x2c, 0xf7, 0xcf, 0x54, 0x28, 0xe9, 0xfa, 0x7a, 0x45, 0x97,
	0xca, 0x5f, 0xd1, 0xb1, 0xd4, 0x9b, 0x78, 0x2a, 0x21, 0xfe, 0xc3, 0xb4, 0xf9, 0x96, 0xc6, 0xca,
	0xf7, 0x9f, 0x7d, 0x8f, 0xac, 0x62, 0x91, 0xac, 0x5d, 0x55, 0x8c, 0x98, 0x36, 0xf4, 0xcc, 0x5e,
	0xed, 0x79, 0x15, 0x91, 0x1b, 0x78, 0x26, 0xb9, 0xb9, 0xe1, 0xf1, 0x2d, 0xba, 0xe9, 0xd0, 0x25,
	0x9b, 0x43, 0x87, 0xa5, 0xcf, 0x37, 0x53, 0x97, 0xb5, 0x0b, 0x17, 0x42, 0xe6, 0x13, 0x97, 0x64,
	0x3e, 0xe8, 0x19, 0x74, 0x41, 0x9d, 0x9e, 0x57, 0x51, 0xed, 0x39, 0x7a, 0xb0, 0xff, 0x14, 0x91,
	0x06, 0x5e, 0x09, 0xbd, 0xc3, 0x83, 0xca, 0x7f, 0xfb, 0xc7, 0x47, 0xce, 0xef, 0x10, 0x0b, 0x27,
	0xf5, 0x2a, 0x1d, 0x60, 0xb2, 0x1f, 0x41, 0x5b, 0x03, 0x73, 0xfe, 0x16, 0x5d, 0xc5, 0xee, 0xb4,
	0xda, 0x8c, 0x93, 0x95, 0x96, 0x31, 0x52, 0xef, 0x51, 0xda, 0xeb, 0xf5, 0x5c, 0x63, 0x5f, 0x47,
	0x32, 0xd3, 0x85, 0xe5, 0x08, 0xda, 0xa2, 0xab, 0x7e, 0x32, 0x52, 0x89, 0xdf, 0xc2, 0xd8, 0x67,
	0x51, 0xf2, 0x7e, 0xb6, 0xb3, 0x5b, 0x6e, 0x75, 0x23, 0x83, 0x32, 0xde, 0x2f, 0x38, 0xbb, 0x5b,
	0xdd, 0x25, 0xbb, 0x78, 0x63, 0x38, 0x5b, 0x4e, 0xaf, 0x05, 0xdc, 0x31, 0x2d, 0x70, 0x14, 0x68,
	0xd1, 0x51, 0x01, 0x38, 0x4d, 0x01, 0xda, 0xe1, 0xc2, 0x38, 0x70, 0x9b, 0x69, 0xe3, 0x92, 0x09,
	0x3c, 0xfe, 0x38, 0x83, 0x26, 0x5f, 0xbf, 0x2f, 0x8e, 0xdd, 0xed, 0x17, 0xd1, 0x8b, 0x7e, 0x11,
	0xbd, 0xec, 0x17, 0xd1, 0xbb, 0x7e, 0x11, 0x35, 0x26, 0xec, 0x4b, 0xda, 0xf9, 0x14, 0x00, 0x00,
	0xff, 0xff, 0x45, 0xb6, 0xa2, 0xbd, 0x68, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingEmpty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Empty, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingListClient, error)
	// Время на сервере
	TimeService(ctx context.Context, in *ticker.TimeRequest, opts ...grpc.CallOption) (PingService_TimeServiceClient, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pb.PingService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingEmpty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pb.PingService/PingEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.PingService/PingError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[0], "/pb.PingService/PingList", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingListClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingListClient struct {
	grpc.ClientStream
}

func (x *pingServicePingListClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) TimeService(ctx context.Context, in *ticker.TimeRequest, opts ...grpc.CallOption) (PingService_TimeServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[1], "/pb.PingService/TimeService", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServiceTimeServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_TimeServiceClient interface {
	Recv() (*ticker.TimeResponse, error)
	grpc.ClientStream
}

type pingServiceTimeServiceClient struct {
	grpc.ClientStream
}

func (x *pingServiceTimeServiceClient) Recv() (*ticker.TimeResponse, error) {
	m := new(ticker.TimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingEmpty(context.Context, *Empty) (*PingResponse, error)
	PingError(context.Context, *PingRequest) (*Empty, error)
	PingList(*PingRequest, PingService_PingListServer) error
	// Время на сервере
	TimeService(*ticker.TimeRequest, PingService_TimeServiceServer) error
}

// UnimplementedPingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPingServiceServer struct {
}

func (*UnimplementedPingServiceServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPingServiceServer) PingEmpty(ctx context.Context, req *Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingEmpty not implemented")
}
func (*UnimplementedPingServiceServer) PingError(ctx context.Context, req *PingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingError not implemented")
}
func (*UnimplementedPingServiceServer) PingList(req *PingRequest, srv PingService_PingListServer) error {
	return status.Errorf(codes.Unimplemented, "method PingList not implemented")
}
func (*UnimplementedPingServiceServer) TimeService(req *ticker.TimeRequest, srv PingService_TimeServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method TimeService not implemented")
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).PingEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PingService/PingEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).PingEmpty(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).PingError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PingService/PingError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).PingError(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).PingList(m, &pingServicePingListServer{stream})
}

type PingService_PingListServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type pingServicePingListServer struct {
	grpc.ServerStream
}

func (x *pingServicePingListServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PingService_TimeService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ticker.TimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).TimeService(m, &pingServiceTimeServiceServer{stream})
}

type PingService_TimeServiceServer interface {
	Send(*ticker.TimeResponse) error
	grpc.ServerStream
}

type pingServiceTimeServiceServer struct {
	grpc.ServerStream
}

func (x *pingServiceTimeServiceServer) Send(m *ticker.TimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
		{
			MethodName: "PingEmpty",
			Handler:    _PingService_PingEmpty_Handler,
		},
		{
			MethodName: "PingError",
			Handler:    _PingService_PingError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingList",
			Handler:       _PingService_PingList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TimeService",
			Handler:       _PingService_TimeService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCodeReturned != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.ErrorCodeReturned))
		i--
		dAtA[i] = 0x18
	}
	if m.SleepTimeMs != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.SleepTimeMs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Counter != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMain(dAtA []byte, offset int, v uint64) int {
	offset -= sovMain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.SleepTimeMs != 0 {
		n += 1 + sovMain(uint64(m.SleepTimeMs))
	}
	if m.ErrorCodeReturned != 0 {
		n += 1 + sovMain(uint64(m.ErrorCodeReturned))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovMain(uint64(m.Counter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMain(x uint64) (n int) {
	return sovMain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`SleepTimeMs:` + fmt.Sprintf("%v", this.SleepTimeMs) + `,`,
		`ErrorCodeReturned:` + fmt.Sprintf("%v", this.ErrorCodeReturned) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Counter:` + fmt.Sprintf("%v", this.Counter) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SleepTimeMs", wireType)
			}
			m.SleepTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SleepTimeMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCodeReturned", wireType)
			}
			m.ErrorCodeReturned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCodeReturned |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMain = fmt.Errorf("proto: unexpected end of group")
)
